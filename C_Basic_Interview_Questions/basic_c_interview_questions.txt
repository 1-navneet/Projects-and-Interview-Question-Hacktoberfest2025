Basic C Interview Questions and Answers
=======================================

1. What is C programming language?
Answer: C is a general-purpose, procedural programming language developed by Dennis Ritchie at Bell Labs in 1972. It is widely used for system programming, embedded systems, and as a foundation for other languages like C++ and Java.

2. What are the key features of C?
Answer: Key features include portability, efficiency, modularity, flexibility, and low-level access to memory.

3. What is the difference between C and C++?
Answer: C is procedural, while C++ is object-oriented. C++ supports classes, inheritance, and polymorphism, which C does not.

4. What is a compiler?
Answer: A compiler is a program that translates source code written in a high-level language into machine code that can be executed by a computer.

5. What is the entry point of a C program?
Answer: The main() function is the entry point of every C program.

6. What is the syntax of the main function in C?
Answer: int main() { /* code */ } or int main(int argc, char *argv[]) { /* code */ }

7. What are header files in C?
Answer: Header files contain function declarations, macros, and data types. They are included using #include directive.

8. What is the difference between #include <file> and #include "file"?
Answer: #include <file> searches in standard library paths, while #include "file" searches in the current directory first.

9. What are data types in C?
Answer: Basic data types: int, char, float, double. Derived: arrays, pointers, structures, unions.

10. What is the size of int in C?
Answer: Typically 4 bytes (32 bits) on most systems, but it can vary.

11. What is the range of signed int?
Answer: -2,147,483,648 to 2,147,483,647 (for 32-bit).

12. What is the difference between signed and unsigned int?
Answer: Signed can hold negative values, unsigned cannot but has double the positive range.

13. What is a variable in C?
Answer: A variable is a named memory location that holds a value.

14. How to declare a variable in C?
Answer: datatype variable_name; e.g., int x;

15. What is initialization of a variable?
Answer: Assigning an initial value: int x = 5;

16. What are constants in C?
Answer: Values that cannot be changed: #define PI 3.14 or const int MAX = 100;

17. What are operators in C?
Answer: Arithmetic, relational, logical, bitwise, assignment, etc.

18. What is the precedence of operators?
Answer: Parentheses > unary > multiplicative > additive > shift > relational > equality > bitwise AND > bitwise XOR > bitwise OR > logical AND > logical OR > conditional > assignment > comma.

19. What is a control structure?
Answer: Statements that control the flow of execution: if-else, switch, loops.

20. What is the syntax of if-else?
Answer: if (condition) { /* code */ } else { /* code */ }

21. What is a switch statement?
Answer: Multi-way branch: switch (expression) { case value: /* code */ break; default: /* code */ }

22. What are loops in C?
Answer: for, while, do-while.

23. What is the difference between while and do-while?
Answer: while checks condition first, do-while executes at least once.

24. What is a for loop?
Answer: for (init; condition; increment) { /* code */ }

25. What is an array in C?
Answer: A collection of similar data types stored in contiguous memory.

26. How to declare an array?
Answer: datatype array_name[size]; e.g., int arr[10];

27. How to initialize an array?
Answer: int arr[5] = {1,2,3,4,5}; or int arr[] = {1,2,3};

28. What is a string in C?
Answer: An array of characters ending with '\0'.

29. How to declare a string?
Answer: char str[20]; or char *str;

30. What are string functions in C?
Answer: strlen, strcpy, strcmp, strcat, etc. (from <string.h>)

31. What is a pointer in C?
Answer: A variable that stores the address of another variable.

32. How to declare a pointer?
Answer: datatype *ptr; e.g., int *p;

33. What is dereferencing a pointer?
Answer: Accessing the value at the address: *p

34. What is NULL pointer?
Answer: A pointer that points to nothing: int *p = NULL;

35. What is a function in C?
Answer: A block of code that performs a specific task.

36. How to declare a function?
Answer: return_type function_name(parameters);

37. What is function prototype?
Answer: Declaration of function before definition.

38. What is recursion?
Answer: A function calling itself.

39. What is a structure in C?
Answer: A user-defined data type that groups related variables.

40. How to define a structure?
Answer: struct struct_name { datatype member1; ... };

41. How to access structure members?
Answer: struct_var.member or ptr->member

42. What is a union in C?
Answer: Similar to struct but shares memory.

43. What is the difference between struct and union?
Answer: Struct allocates memory for all members, union for the largest.

44. What is file I/O in C?
Answer: Reading from and writing to files using functions like fopen, fclose, fread, fwrite.

45. What are the modes for fopen?
Answer: "r", "w", "a", "r+", "w+", "a+"

46. What is dynamic memory allocation?
Answer: Allocating memory at runtime using malloc, calloc, realloc, free.

47. What is malloc?
Answer: Allocates memory: ptr = (datatype*) malloc(size);

48. What is calloc?
Answer: Allocates and initializes to zero: ptr = (datatype*) calloc(n, size);

49. What is free?
Answer: Deallocates memory: free(ptr);

50. What is a preprocessor directive?
Answer: Instructions processed before compilation: #include, #define, #ifdef, etc.

51. What is #define?
Answer: Defines macros: #define PI 3.14

52. What is #ifdef?
Answer: Conditional compilation: #ifdef MACRO /* code */ #endif

53. What is the difference between macro and function?
Answer: Macro is expanded at compile time, function at runtime.

54. What is typedef?
Answer: Creates aliases for data types: typedef int INTEGER;

55. What is enum?
Answer: Defines constants: enum days {MON, TUE, WED};

56. What is a command line argument?
Answer: Arguments passed to main: int main(int argc, char *argv[])

57. What is argc and argv?
Answer: argc is count of arguments, argv is array of strings.

58. What is volatile keyword?
Answer: Tells compiler the variable can change unexpectedly.

59. What is const keyword?
Answer: Makes variable read-only.

60. What is static keyword?
Answer: Retains value between function calls or limits scope.

61. What is extern keyword?
Answer: Declares a variable defined elsewhere.

62. What is register keyword?
Answer: Suggests storing variable in register.

63. What is auto keyword?
Answer: Default storage class for local variables.

64. What is a bit field?
Answer: Allows packing data in fewer bits.

65. What is the size of char?
Answer: 1 byte.

66. What is the size of float?
Answer: 4 bytes.

67. What is the size of double?
Answer: 8 bytes.

68. What is the range of char?
Answer: -128 to 127 (signed) or 0 to 255 (unsigned).

69. What is ASCII?
Answer: American Standard Code for Information Interchange, maps characters to numbers.

70. What is EOF?
Answer: End of File, constant from <stdio.h>.

71. What is printf?
Answer: Function to print formatted output.

72. What is scanf?
Answer: Function to read formatted input.

73. What are format specifiers?
Answer: %d for int, %f for float, %c for char, %s for string.

74. What is gets and puts?
Answer: gets reads string, puts writes string.

75. What is fgets and fputs?
Answer: Safer versions for file I/O.

76. What is a linked list?
Answer: Data structure with nodes linked by pointers.

77. What is a stack?
Answer: LIFO data structure.

78. What is a queue?
Answer: FIFO data structure.

79. What is a binary tree?
Answer: Tree where each node has at most two children.

80. What is sorting?
Answer: Arranging elements in order.

81. What is searching?
Answer: Finding an element in a collection.

82. What is bubble sort?
Answer: Compares adjacent elements and swaps.

83. What is quick sort?
Answer: Divides array into partitions.

84. What is binary search?
Answer: Searches in sorted array by halving.

85. What is linear search?
Answer: Searches sequentially.

86. What is recursion vs iteration?
Answer: Recursion uses function calls, iteration uses loops.

87. What is a memory leak?
Answer: Failure to free allocated memory.

88. What is segmentation fault?
Answer: Accessing invalid memory.

89. What is dangling pointer?
Answer: Pointer to freed memory.

90. What is wild pointer?
Answer: Uninitialized pointer.

91. What is void pointer?
Answer: Generic pointer, can point to any type.

92. What is function pointer?
Answer: Pointer to a function.

93. What is callback function?
Answer: Function passed as argument.

94. What is the difference between pass by value and pass by reference?
Answer: Value copies data, reference passes address.

95. What is a global variable?
Answer: Variable accessible throughout the program.

96. What is a local variable?
Answer: Variable inside a function.

97. What is scope?
Answer: Region where variable is accessible.

98. What is lifetime of a variable?
Answer: Duration variable exists in memory.

99. What is the C standard library?
Answer: Collection of header files and functions.

100. What is <stdio.h>?
Answer: Standard input/output functions.

101. What is <stdlib.h>?
Answer: General utilities like malloc.

102. What is <string.h>?
Answer: String manipulation functions.

103. What is <math.h>?
Answer: Mathematical functions.

104. What is <ctype.h>?
Answer: Character classification functions.

105. What is toupper and tolower?
Answer: Convert case.

106. What is isdigit and isalpha?
Answer: Check if digit or letter.

107. What is rand and srand?
Answer: Generate random numbers.

108. What is time function?
Answer: Get current time.

109. What is exit function?
Answer: Terminate program.

110. What is atoi?
Answer: Convert string to int.

111. What is itoa?
Answer: Convert int to string (not standard).

112. What is memcpy?
Answer: Copy memory blocks.

113. What is memset?
Answer: Set memory to value.

114. What is strcmp?
Answer: Compare strings.

115. What is strlen?
Answer: Get string length.

116. What is strcpy?
Answer: Copy string.

117. What is strcat?
Answer: Concatenate strings.

118. What is strstr?
Answer: Find substring.

119. What is strncmp?
Answer: Compare n characters of strings.

120. What is strncat?
Answer: Concatenate n characters.

121. What is strncmp?
Answer: Compare n characters.

122. What is sprintf?
Answer: Print to string.

123. What is sscanf?
Answer: Scan from string.

124. What is feof?
Answer: Check end of file.

125. What is ferror?
Answer: Check file error.

126. What is rewind?
Answer: Reset file pointer to beginning.

127. What is ftell?
Answer: Get current file position.

128. What is fseek?
Answer: Set file position.

129. What is perror?
Answer: Print error message.

130. What is assert?
Answer: Debugging macro.

131. What is #pragma?
Answer: Compiler-specific directives.

132. What is __FILE__ and __LINE__?
Answer: Predefined macros for file and line number.

133. What is the difference between ++i and i++?
Answer: ++i increments first, i++ after use.

134. What is a ternary operator?
Answer: condition ? true : false

135. What is comma operator?
Answer: Evaluates expressions left to right.

136. What is sizeof operator?
Answer: Returns size of data type.

137. What is & and * operators?
Answer: & address, * dereference.

138. What is -> operator?
Answer: Access member via pointer.

139. What is . operator?
Answer: Access member directly.

140. What is type casting?
Answer: Converting one data type to another.

141. What is implicit and explicit casting?
Answer: Implicit automatic, explicit manual.

142. What is a macro?
Answer: Code substitution.

143. What is a token?
Answer: Smallest unit in C.

144. What is a keyword?
Answer: Reserved words.

145. What are the keywords in C?
Answer: auto, break, case, char, const, continue, default, do, double, else, enum, extern, float, for, goto, if, int, long, register, return, short, signed, sizeof, static, struct, switch, typedef, union, unsigned, void, volatile, while.

146. What is goto?
Answer: Jump to label.

147. What is break?
Answer: Exit loop or switch.

148. What is continue?
Answer: Skip to next iteration.

149. What is return?
Answer: Exit function and return value.

150. What is void?
Answer: No type or return type.

151. What is main return type?
Answer: int, returns 0 for success.

152. What is argv[0]?
Answer: Program name.

153. What is a buffer?
Answer: Temporary storage.

154. What is buffer overflow?
Answer: Writing beyond buffer size.

155. What is stack overflow?
Answer: Too much recursion or large local variables.

156. What is heap?
Answer: Dynamic memory area.

157. What is stack?
Answer: Local variables and function calls.

158. What is the difference between stack and heap?
Answer: Stack automatic, heap manual.

159. What is a process?
Answer: Running program instance.

160. What is a thread?
Answer: Lightweight process.

161. What is multithreading in C?
Answer: Not standard, use libraries like pthreads.

162. What is a socket?
Answer: Endpoint for communication.

163. What is networking in C?
Answer: Use sockets API.

164. What is a library?
Answer: Collection of functions.

165. What is static library?
Answer: Linked at compile time.

166. What is dynamic library?
Answer: Linked at runtime.

167. What is Makefile?
Answer: Build automation file.

168. What is gcc?
Answer: GNU C Compiler.

169. What is gdb?
Answer: GNU Debugger.

170. What is valgrind?
Answer: Memory debugging tool.

171. What is lint?
Answer: Code quality checker.

172. What is the C standard?
Answer: ANSI C, C99, C11, etc.

173. What is K&R C?
Answer: Original C by Kernighan and Ritchie.

174. What is ANSI C?
Answer: Standardized C.

175. What is C99?
Answer: Added features like inline, bool.

176. What is C11?
Answer: Added threads, atomics.

177. What is bool in C?
Answer: From <stdbool.h>, _Bool type.

178. What is complex numbers in C?
Answer: From <complex.h>.

179. What is inline function?
Answer: Suggestion to inline code.

180. What is restrict keyword?
Answer: No aliasing.

181. What is _Generic?
Answer: Type-generic macros.

182. What is variable length array?
Answer: Array size determined at runtime.

183. What is designated initializer?
Answer: Initialize specific members.

184. What is compound literal?
Answer: Temporary object.

185. What is flexible array member?
Answer: Array at end of struct.

186. What is anonymous struct/union?
Answer: No name.

187. What is _Alignas and _Alignof?
Answer: Alignment control.

188. What is _Noreturn?
Answer: Function doesn't return.

189. What is _Static_assert?
Answer: Compile-time assertion.

190. What is atomic operations?
Answer: Thread-safe operations.

191. What is memory model?
Answer: How memory works in concurrent programs.

192. What is endianness?
Answer: Byte order in memory.

193. What is little-endian?
Answer: Least significant byte first.

194. What is big-endian?
Answer: Most significant byte first.

195. What is portability?
Answer: Code runs on different systems.

196. What is cross-compilation?
Answer: Compile for different architecture.

197. What is embedded C?
Answer: C for embedded systems.

198. What is real-time system?
Answer: Systems with timing constraints.

199. What is interrupt?
Answer: Signal to processor.

200. What is ISR?
Answer: Interrupt Service Routine.

This list covers a wide range of basic C interview questions. For more advanced topics, consider data structures, algorithms, and system programming.
