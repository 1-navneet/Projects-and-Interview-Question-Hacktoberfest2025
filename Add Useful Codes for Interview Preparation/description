"""
DSA Algorithms & Data Structures - Python Implementation

This Python module `dsa_algorithms.py` is a complete reference for **Data Structures and Algorithms (DSA)**, designed for students, competitive programmers, and software engineers. 
It includes well-documented implementations of essential algorithms and data structures, along with explanations, example usage, and time & space complexities.

Features:

1. **Algorithms**
   - **Sorting Algorithms:** Bubble Sort, Selection Sort, Insertion Sort, Merge Sort, Quick Sort, Heap Sort
   - **Searching Algorithms:** Linear Search, Binary Search, Ternary Search
   - **Dynamic Programming:** Fibonacci Sequence, Longest Common Subsequence (LCS), 0/1 Knapsack, Coin Change, Minimum Path Sum in Grid
   - **Greedy Algorithms:** Activity Selection, Fractional Knapsack
   - **Graph Algorithms:** BFS, DFS, Dijkstra’s Shortest Path, Kruskal’s MST, Prim’s MST

2. **Data Structures**
   - **Linear Structures:** Stack, Queue, Deque, Singly & Doubly Linked List
   - **Non-linear Structures:** Binary Tree, Binary Search Tree (BST), N-ary Tree, Trie
   - **Graphs:** Adjacency List, Adjacency Matrix
   - **Hashing:** Hash Table / Dictionary
   - **Heap / Priority Queue:** Min-Heap, Max-Heap

**Highlights:**
- Each algorithm and data structure is implemented in **pure Python**.
- **Detailed explanations** are included with code for better understanding.
- **Time and Space complexities** are mentioned for every function.
- **Example usage** is provided for easy testing and learning.

This file serves as a **single reference point** for anyone preparing for technical interviews, competitive programming contests, or learning DSA from scratch.

"""



#TABLE CONTANT____

# --------------------
# Algorithms
# --------------------

## Sorting
# Bubble Sort
# Selection Sort
# Insertion Sort
# Merge Sort
# Quick Sort
# Heap Sort

## Searching
# Linear Search
# Binary Search
# Ternary Search

## Dynamic Programming
# Fibonacci Sequence
# Longest Common Subsequence (LCS)
# Knapsack Problem (0/1)
# Coin Change Problem
# Minimum Path Sum in Grid

## Greedy Algorithms
# Activity Selection
# Fractional Knapsack

## Graph Algorithms
# BFS
# DFS
# Dijkstra
# Kruskal MST
# Prim MST

# --------------------
# Data Structures
# --------------------

## Linear Structures
# Stack
# Queue
# Deque
# Linked List (Singly & Doubly)

## Non-linear Structures
# Binary Tree
# BST
# N-ary Tree
# Trie

## Graphs
# Adjacency List
# Adjacency Matrix

## Hashing
# Hash Table / Dictionary

## Heap
# Heap / Priority Queue



"""
Use Cases & Applications:

1. Algorithms:

   - Sorting Algorithms:
     Useful in organizing data, optimizing searches, ranking systems, and preprocessing
     data for other algorithms. For example, Quick Sort and Merge Sort are used in
     database indexing and large-scale data processing.

   - Searching Algorithms:
     Essential for quickly finding elements in data structures. Binary and Ternary Search
     are used in search engines, databases, and systems requiring fast lookup.

   - Dynamic Programming:
     Used for solving optimization problems where overlapping subproblems exist.
     Examples include route optimization, resource allocation, and computational biology
     problems like sequence alignment.

   - Greedy Algorithms:
     Ideal for optimization problems where local choices lead to global optimum.
     Common in scheduling, resource allocation, and network routing.

   - Graph Algorithms:
     Applied in networking, social networks, GPS navigation, game development,
     dependency resolution, and any system modeled with nodes and edges.

2. Data Structures:

   - Linear Structures (Stack, Queue, Deque, Linked List):
     Used in task scheduling, undo/redo operations, breadth-first and depth-first
     traversals, buffering, and memory management.

   - Non-linear Structures (Binary Tree, BST, N-ary Tree, Trie):
     Crucial for hierarchical data representation, searching, indexing, autocomplete
     systems (Trie), and database structures.

   - Graphs (Adjacency List / Matrix):
     Used to model relationships and networks, perform pathfinding, social network
     analysis, and transportation systems.

   - Hashing (Hash Table / Dictionary):
     Provides fast lookup, insert, and delete operations.
     Widely used in caching, frequency counting, and symbol tables.

   - Heap / Priority Queue:
     Useful for implementing efficient priority-based systems like job scheduling,
     Dijkstra’s algorithm for shortest paths, and real-time event simulation.

Overall, this module is ideal for:
- **Interview preparation**: Practice and reference for common DSA questions.
- **Competitive programming**: Quick access to standard implementations.
- **Learning and understanding DSA**: Includes definitions, explanations, and examples.
- **Real-world applications**: Any software or system requiring efficient data handling and processing.
"""
